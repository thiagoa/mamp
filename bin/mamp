#!/usr/bin/env ruby
require 'gli'
require 'mamp'

include GLI::App

SUPPORTED_SERVERS = %w(apache mysql)
$servers_desc = "Supported servers: #{SUPPORTED_SERVERS.join(', ')}.";

program_desc 'Web development with Apache, PHP and MySQL. This app ' +
             'provides an unified interface for common tasks.'

version Mamp::VERSION

desc "Start specified servers. #{$servers_desc}"
arg_name 'server_name'
command :start do |c|
  c.desc 'Describe a flag to start'

  c.action do |global_options, options, args|
    servers = args || SUPPORTED_SERVERS
    puts "Starting servers: #{servers.join(', ')}"
  end
end

desc "Stop specified servers. Supported servers: #{$servers_desc}"
arg_name 'server_name'
command :stop do |c|
  c.action do |global_options, options, args|
    servers = args || SUPPORTED_SERVERS
    puts "Stopping servers: #{servers.join(', ')}"
  end
end

desc 'Change current PHP version. You must install PHP versions with Homebrew.'
arg_name 'php_version'
command :php do |c|
  c.action do |global_options, options, args|
    puts "php command ran"
  end
end

desc 'Edit Apache vhost. The vhost must be previously created with the vhost command.'
arg_name 'vhosts_name'
command :edit do |c|
  c.desc 'Editor to use. Defaults to $EDITOR env variable.'
  c.default_value ENV['EDITOR']
  c.flag :editor

  c.action do |global_options, options, args|
    puts "edit command ran"
  end
end

desc 'Initialize environment to use mamp. Needs a root password.'
command :init do |c|
  c.action do |global_options, options, args|
    puts "setup command ran"
  end
end

desc 'Add or remove vhosts from Apache'
arg_name 'vhost_name'
command :vhost do |c|
  c.desc 'Directory to create the vhost'
  c.arg_name 'directory'
  c.default_value '.'
  c.flag :d

  c.desc 'Add a vhost'
  c.switch [:a, :add], negatable: false

  c.desc 'Remove a vhost'
  c.switch :remove, negatable: false

  c.action do |global_options, options, args|
    puts "vhost command ran"
  end
end

pre do |global, command, options, args|
  true
end

post do |global, command, options, args|
end

on_error do |exception|
  true
end

exit run(ARGV)
